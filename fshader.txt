#version 430

in vec3 Position;
in vec3 Normal;
in vec4 ShadowCoord;

struct LightInfo {
    vec4  Position;  // Light position in eye coords
    vec3  Intensity; // Light intensity
};

uniform LightInfo Light;

struct MaterialInfo {
    vec3  Ka;        // Ambient  reflectivity
    vec3  Kd;        // Diffuse  reflectivity
    vec3  Ks;        // Specular reflectivity
    float Shininess; // Specular shininess factor
};

uniform MaterialInfo Material;

uniform sampler2DShadow ShadowMap;

out vec4 FragColor;

vec3 phongModelDiffAndSpec ( vec3 position, vec3 normal ) {

    vec3 n = Normal;
    if( !gl_FrontFacing ) n = -n;

    vec3 s = normalize(vec3(Light.Position) - position);
    vec3 v = normalize(-position.xyz); // In eyeCoords, the viewer is at the origin -> only take negation of eyeCoords vector
    vec3 r = reflect( -s, n );

    vec3  ambient  = Light.Intensity * Material.Ka;

    float sDotN    = max(dot(s, normal), 0.0);
    vec3  diffuse  = Material.Kd * sDotN;
    vec3  spec     = vec3(0.0);
    if (sDotN > 0.0) {
        spec = Material.Ks * pow(max(dot(r, v), 0.0), Material.Shininess);
    }

    return ambient + Light.Intensity * (diffuse + spec);
}

void main()
{    
    //FragColor = vec4 (1.0, 1.0, 0.0, 1.0);
    FragColor = vec4(phongModelDiffAndSpec(Position, Normal), 1.0);

    /*
    if( gl_FrontFacing ) {
        FragColor = vec4(phongModelSpot(Position, Normal), 1.0);
        //FragColor = vec4(1.0, 0.0, 0.0, 1.0);
    } else {
        //FragColor = mix( vec4(BackColor, 1.0), vec4(1.0,0.0,0.0,1.0), 0.7 );
        FragColor = vec4(phongModelSpot(Position, -Normal), 1.0);
        //FragColor = vec4(0.0, 1.0, 0.0, 1.0);
    }
    */
}
