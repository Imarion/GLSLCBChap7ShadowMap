#version 430

in vec3 Position;
in vec3 Normal;
in vec4 ShadowCoord;

struct LightInfo {
    vec4  Position;  // Light position in eye coords
    vec3  Intensity; // Light intensity
};

uniform LightInfo Light;

struct MaterialInfo {
    vec3  Ka;        // Ambient  reflectivity
    vec3  Kd;        // Diffuse  reflectivity
    vec3  Ks;        // Specular reflectivity
    float Shininess; // Specular shininess factor
};

uniform MaterialInfo Material;

uniform sampler2DShadow ShadowMap;

out vec4 FragColor;

vec3 phongModelDiffAndSpec ( ) {

    vec3 n = Normal;
    if( !gl_FrontFacing ) n = -n;

    vec3 s = normalize(vec3(Light.Position) - Position);
    vec3 v = normalize(-Position.xyz); // In eyeCoords, the viewer is at the origin -> only take negation of eyeCoords vector
    vec3 r = reflect( -s, n );

    float sDotN    = max(dot(s, n), 0.0);
    vec3  diffuse  = Material.Kd * sDotN;
    vec3  spec     = vec3(0.0);
    if (sDotN > 0.0) {
        spec = Material.Ks * pow(max(dot(r, v), 0.0), Material.Shininess);
    }

    return Light.Intensity * (diffuse + spec);
}

subroutine void RenderPassType();
subroutine uniform RenderPassType RenderPass;

subroutine (RenderPassType)
void shadeWithShadow()
{
    vec3 ambient = Light.Intensity * Material.Ka;
    vec3 diffAndSpec = phongModelDiffAndSpec();

    float shadow = textureProj(ShadowMap, ShadowCoord);

    // If the fragment is in shadow, use ambient light only.
    FragColor = vec4(diffAndSpec * shadow + ambient, 1.0);

    // Gamma correct
    FragColor = pow( FragColor, vec4(1.0 / 2.2) );

    //FragColor = vec4 (shadow, shadow, shadow, 1.0);
}

subroutine (RenderPassType)
void recordDepth()
{
    // Do nothing, depth will be written automatically    
}

void main()
{    
    RenderPass();

    //FragColor = vec4 (1.0, 1.0, 0.0, 1.0);
    //FragColor = vec4(phongModelDiffAndSpec(Position, Normal), 1.0);
}
